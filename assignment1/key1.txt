Gurbir Arora 
105178554

1.1 Moving around in Emacs
1. entered exer1.html in Emacs by typing e m a c s  e x e r 1 . h t m l Enter 
2. used C-s HTML Enter to search for first instance of HTML 
3. C-s s c a v e n g e r Enter M-b 
4. C-s s e l f - r e f e r e n t i a l Enter M-b M-b 
5. C-s a r r o w Enter M-b
6. C-e 
7. C-a
8. You can use the commands that I used(C-e and C-a) and you can find more helpful commands using the manual/Emacs reference card. 
9. I used the commands mentioned above
10. C-x C-c and hit y to save the file. 

1.2 Deleting text in Emacs
1. e m a c s   e x e r 2 . h t m l Enter 
2. C-s < ! - to find the comment, Enter, then use C-a C-k to delete the line or M-g 19 Enter C-k 
3. C-s D E L E T E, Enter then C-a C-k to delete the line 
4. Scroll to top of file using C-x [, then use C-s  < ! - - Enter. From here, click C-a C-k move down one line using the down arrow, then click C-k and move down using the down arrow once again and do C-k  
5. Move top of file using C-x [, then search using C-s < ! -  Enter,since this comment is surrounded by other text, move the cursor to the end of the comment and hit DELETE until the comment is fully removed, then search using C-s < !- - and hit Enter, now since this is a multi line comment, start by hitting C-a C-k, hit the down arrow to move down a line then C-k, repeat until comment is fully removed. Finally, C-s < ! - - for the last comment, hit Enter, C-a C-k

1.3 Inserting text in Emacs
1. e m a c s   e x e r 3 . h t m l 
2. C-s A s s i g n m e n t  1 Enter delete 4 2 C-s A s s i g n m e n t  1 Enter delete 4 2
3.C-x [ C-s U T F - 8 Enter delete delete delete delete delete U S - A S C I I
4.C-x [ C-M-s [ ^ [ : a s c i i : ] ] Enter C-a C-k
5.C-x [ C-s < / o l > Enter Enter 
6.C-x C-c y and used diff command to check work

1.4: Other editing tasks in Emacs
1. 
2.e m a c s   e x e r 4 . d i f f Enter
3.C-x ] C-r < ! Enter C-SP C-e M-w M-g M-g 455 C-y Enter
4.C-x ] C-r < ! C-r Enter C-SP M-e M-e then use arrows to fix end point of highlight to the end of the comment  M-w M-g M-g 434 C-y Enter
C-x ] C-r < ! C-r C-r Enter C-a C-SP C-e M-w M-g M-g 433 C-y, then delete everything that wasn't just pasted by doing C-e then delete until correct 
C-x ] C-r < ! C-r C-r C-r Enter C-SP M-e DOWNARROW M-w M-g M-g 387 C-y Enter 
C-x ] C-r < ! C-r C-r C-r C-r Enter C-SP C-e M-w M-g M-g 131 C-y 
C-x ] C-r < ! C-r C-r C-r C-r C-r Enter C-SP C-e M-w M-g M-g 19 C-y   
5.  C-x ] C-r - - - C-r C-r Enter C-SP C-x ]  C-w 
6. C-x _
7.C-x ] - - > C-r - - - C-r C-r Enter < ! - -  
8.C-x ] C-r < o l > C-r C-r C-r C-r C-r C-r  counted: 7 <ol>
C-x ] M-% < o l > Enter < o L > Enter y y y y y y y
9.checked work by doing diff command 

1.5: Doing commands in Emacs
1.e m a c s Enter M-x m k d i r Enter j u n k Enter 
2. M-x c d Enter j u n k Enter C-x C-f h e l l o . c Enter Copy the file C-x C-s
3. M-x c o m p i l e Enter g c c h e l l o . c - o h e l l o Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter 
5.EOF on input
C-@ M-> M-w C-x C-f a s s i g n m e n t 1 / k e y 1 . t x t Enter C-y

1.6 Running Elisp code
1. C-x b Enter
2. m o st - n e g a t i v e - f i x n u m C-j: -2305843009213693952
m o s t - p o s i t i v e - f i x n u m C-j: 2305843009213693951
( f o r m a t   " % x " 2 3 0 5 8 4 3 0 0 9 2 1 3 6 9 3 9 5 1 ) C-j: "1fffffffffffffff"
( f o r m a t   " % x " - 2 3 0 5 8 4 3 0 0 9 2 1 3 6 9 3 9 5 2 ) C-j: "2000000000000000"
The log base 2 of the extreme values comes out to be 61, meaning that 61 bits are required to represent the max number. We can assume that this is the max due to 64 bit limitations. 
3. ( r a n d o m  " 1 0 5 - 1 7 8 - 5 5 4 " ) C-j : 1553681589305208486
4. ( s e t q  x   ( r a n d o m ) ) C-j: -26241487100697947
( s e t q   y   ( r a n d o m ) ) C-j: 123467535106621665
5. (* x y) C-j : 455053849572422405
l o g a n d   p   m o s t - p o s i t i v e - f i x n u m C-j: 2305843009213693951
s e  t q   r   l o g a n d   p   m o s t - p o s i t i v e - f i x n u m:  2305843009213693951
6. r doesn't equal the mathematical product of x and y as y is negative and x is positive while r is positive, which goes against the laws of arithmatic. 
x*y = -4.0770915e+34(calculate using calculator)  != 2305843009213693951
7. The values of x and y are not truly random as the computer uses an algorithm/formula to generate this random number, which means that they are generate following some sequence of rules, which contradicts the defintion of randomness. In addition, the values are limited by the memory bounds of the computer, while a truly random number would have values from negative infinity to positive infinity. 
8.If x and y were truly random, the values of x would need about 61 bits to be represeted, which I got by taking the log base 2 of the max pos va l. Since this value must follow the form 2^n where n is an integer, this entails a 64 bit representation. If this is the case and each number has an equal probability of being selected, the probility of any number being selected is 1/(2^64) and for an product overflow to occur, x*y > 2^64 meaning that the probability of overflow is P(x > 2^32 and y > 2^32) which can be represented as  P(x > 2^32) * P(y > 2^32). One must notice that the number of numbers in the upper bound(>2^32) are much greater that that of the lower bound, as with every increment in the exponent, the number of numbers increases exponentially. To show this, take 2^33 - 2^32 = 4294967296 while something part of the lower bound 2^11 - 2^10 = 1024, meaning that a lot more values are on the upper bound side. This makes it very likely that overflow will occur(~1), their are so many values part of the upper bound. If we sum up all values 2^1 to 2^31, we get 4294967294, while the values 2^32 to 2^64 = 36893488143124132704, which thus proves my point.       
