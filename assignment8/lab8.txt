Gurbir Arora 
105178554

1. Use git clone https://git.savannah.gnu.org/git/diffutils.git to get a copy of the Diffutils repo. 
2. TO get a log of changes to Diffutils' master branch use the command cd diffutils and put it in the file git-log.txt with the command git log > git-lob.txt
3. Generate a list of tags used for Diffutils using the “git tag” command, and put it into the file git-tags.txt by doing git tag > git-tags.txt
4. Find the commit entitled “maint: quote 'like this' or "like this", not `like this'”, and generate a patch for that commit, putting it into the file quote-patch.txt by using cat git-log.txt | grep -C5 'maint: quote', which should give you commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
Author: Paul Eggert <eggert@cs.ucla.edu>
Date:   Wed Jan 25 23:46:16 2012 -0800

    maint: quote 'like this' or "like this", not `like this'
    
    This is in response to a recent change in the GNU coding standards,
    which now suggest quoting 'like this' or "like this", instead of
    `like this' or ``like this''.
    * HACKING, NEWS, README, README-hacking, TODO, doc/diagmeet.note:
Then, use git format-patch -1 --stdout 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt to make the patch.
5. Check out version 3.0 of Diffutils from your repository by running git checkout tags/v3.0
6. Use the patch command to apply quote-patch.txt to version 3.0. In some cases it will not be able to figure out what file to patch; skip past those by typing RETURN. Record any problems you had in applying the patch. 
This can be done by entering patch -p1 < quote-patch.txt and I entered ENTER and y when prompted to enter a file to patch. I got the follwowing errors: 

Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60
Hunk #1 FAILED at 19.
Hunk #1 FAILED at 29.
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.
Hunk #6 FAILED at 433.

7. Use the git status command to get an overview of what happened.
After entering git status, I got an output of: 
HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   NEWS
	modified:   README
	modified:   TODO
	modified:   doc/diagmeet.note
	modified:   ms/config.bat
	modified:   ms/config.site
	modified:   po/en.po
	modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff.h
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/ifdef.c
	modified:   src/io.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/system.h
	modified:   src/util.c
	modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	NEWS.orig
	README-hacking.orig
	README-hacking.rej
	README.orig
	README.rej
	cfg.mk.orig
	cfg.mk.rej
	git-log.txt
	git-tags.txt
	ms/config.site.orig
	quote-patch.txt
	src/cmp.c.orig
	src/context.c.orig
	src/diff.c.orig
	src/diff.c.rej
	src/diff.h.orig
	src/diff3.c.orig
	src/diff3.c.rej
	src/dir.c.orig
	src/sdiff.c.orig
	src/system.h.orig
	src/util.c.orig
	tests/help-version.orig

8. I learned how to use the Emacs functions vc-diff and vc-revert and after reading about them, vc-diff(C-x =) displays a diff which compares each work file in the current VC fileset to the version(s) from which you started editing. The diff is displayed in another window, in a Diff mode buffer (see Diff Mode) named *vc-diff*. The usual Diff mode commands are available in this buffer. In particular, the g (revert-buffer) command performs the file comparison again, generating a new diff.
vc-revert (C-x v u)  shows you a diff between the work file(s) and the revision from which you started editing, and asks for confirmation for discarding the changes. If you agree, the fileset is reverted. If you don't want C-x v u to show a diff, set the variable vc-revert-show-diff to nil (you can still view the diff directly with C-x v =; see Old Revisions).

When you're in the *vc-diff* buffer generated by vc-diff, use describe-mode (C-h m) to find out the Emacs functions that you can use there, and in particular learn how to use the diff-apply-hunk (C-c C-a) and diff-goto-source (C-c C-c) functions.

I used the C-h m to see what happens once I'm in the *vc-diff* buffer generated by vc-diff and found that diff-apply-hunk(C-c C-a) Apply this hunk to its target file (diff-apply-hunk). With a prefix argument of C-u, revert this hunk, i.e. apply the reverse of the hunk, which changes the “new” version into the “old” version. If diff-jump-to-old-file is non-nil, apply the hunk to the “old” version of the file instead.
I also found that diff-goto-source(C-c C-c) Go to the source file and line corresponding to this hunk (diff-goto-source). By default, this jumps to the “new” version of the file, the one shown first on the file header. With a prefix argument, jump to the “old” version instead. If diff-jump-to-old-file is non-nil, this command by default jumps to the “old” file, and the meaning of the prefix argument is reversed. If the prefix argument is a number greater than 8 (e.g., if you type C-u C-u C-c C-c), then this command also sets diff-jump-to-old-file for the next invocation.

9. Use Emacs to revert all the changes to files other than .c files, since you want only changes to .c files. Also, and don't forget this part, undo all the changes to .c files other than changes to character string constants, as the character-string changes are the only changes that you want; this may require editing some files by hand.

The files other than .c were: 
  NEWS
  README
  TODO
  doc/diagmeet.note
  ms/config.bat
  ms/config.site
  po/en.po
  src/diff.h
  src/system.h
  tests/help-version
 
and in order to revert the changes, use enter emacs with the file and use the commands C-x v u, enter yes when prompted and C-x C-c to exit 

To undo all the changes to .c files other than changes to character string constants for the following files: 

  src/analyze.c
  src/cmp.c
  src/context.c
  src/diff.c
  src/diff3.c
  src/dir.c
  src/ifdef.c
  src/io.c
  src/sdiff.c
  src/side.c
  src/util.c

I used C-x v = on each of the .c files to see where changes occured and if a change happened, then I would revert the changes using C-u C-c C-a and then of course exit using C-x C-c 


10. Using find *src/*.c.rej, I found src/diff3.c.rej src/diff.c.rej. 
After inspecting them, I saw that they had changes from strings from `q' to 'q' and `w' to `w' in the diff3.c file, so I went to that file and used C-s to search for "`" and replaced any instance of it. Same for diff.c 

11. git status outputs the following: 

modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/util.c

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	NEWS.orig
	README-hacking.orig
	README-hacking.rej
	README.orig
	README.rej
	cfg.mk.orig
	cfg.mk.rej
	git-log.txt
	git-tags.txt
	ms/config.site.orig
	quote-patch.txt
	src/cmp.c.orig
	src/context.c.orig
	src/diff.c.orig
	src/diff.c.rej
	src/diff.h.orig
	src/diff3.c.orig
	src/diff3.c.rej
	src/dir.c.orig
	src/sdiff.c.orig
	src/system.h.orig
	src/util.c.orig
	tests/help-version.orig
Remove the following files by doing git clean -f

Would remove NEWS.orig
Would remove README-hacking.orig
Would remove README-hacking.rej
Would remove README.orig
Would remove README.rej
Would remove cfg.mk.orig
Would remove cfg.mk.rej
Would remove git-log.txt
Would remove git-tags.txt
Would remove ms/config.site.orig
Would remove quote-patch.txt
Would remove src/cmp.c.orig
Would remove src/context.c.orig
Would remove src/diff.c.orig
Would remove src/diff.c.rej
Would remove src/diff.h.orig
Would remove src/diff3.c.orig
Would remove src/diff3.c.rej
Would remove src/dir.c.orig
Would remove src/sdiff.c.orig
Would remove src/system.h.orig
Would remove src/util.c.orig
Would remove tests/help-version.orig
//uaed git clean -n to see what files would be removed 
Removing NEWS.orig
Removing README-hacking.orig
Removing README-hacking.rej
Removing README.orig
Removing README.rej
Removing cfg.mk.orig
Removing cfg.mk.rej
Removing git-log.txt
Removing git-tags.txt
Removing ms/config.site.orig
Removing quote-patch.txt
Removing src/cmp.c.orig
Removing src/context.c.orig
Removing src/diff.c.orig
Removing src/diff.c.rej
Removing src/diff.h.orig
Removing src/diff3.c.orig
Removing src/diff3.c.rej
Removing src/dir.c.orig
Removing src/sdiff.c.orig
Removing src/system.h.orig
Removing src/util.c.orig
Removing tests/help-version.orig

12. git status now returns 

	modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/util.c

13. using git diff | wc -l, I got a value of 595 and put this into the quote-3.0-patch.txt using git diff > quote-3.0-patch.txt

After reading README-hacking, I found the following commands to run: 

./bootstrap
use wget http://web.cs.ucla.edu/classes/spring20/cs35L/assign/diffutils-gets.diff to get the patch 
and enter patch -p1 < diffutils-gets.diff and run the patch on// was having trouble applying patchm so i just switched to lnxsrv04

./configure
make
make check 
This is the output that I got: 

Making check in lib
make[1]: Entering directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/lib'
  GEN      configmake.h
make  check-recursive
make[2]: Entering directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/lib'
make[3]: Entering directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/lib'
  GEN      configmake.h
make[3]: Leaving directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/lib'
make[2]: Leaving directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/lib'
make[1]: Leaving directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/lib'
Making check in src
make[1]: Entering directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/src'
make  check-am
make[2]: Entering directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/src'
make[2]: Nothing to be done for 'check-am'.
make[2]: Leaving directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/src'
make[1]: Leaving directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/src'
Making check in tests
make[1]: Entering directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/tests'
make  check-TESTS
make[2]: Entering directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/tests'
make[3]: Entering directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/tests'
/bin/sh: /bin/sh: cannot execute binary file
Makefile:1309: recipe for target 'basic.log' failed
make[3]: *** [basic.log] Error 126
make[3]: Leaving directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/tests'
Makefile:1288: recipe for target 'check-TESTS' failed
make[2]: *** [check-TESTS] Error 2
make[2]: Leaving directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/tests'
Makefile:1403: recipe for target 'check-am' failed
make[1]: *** [check-am] Error 2
make[1]: Leaving directory '/w/home.06/ee/ugrad/gurbir/assignment8/diffutils/tests'
Makefile:1017: recipe for target 'check-recursive' failed
make: *** [check-recursive] Error 1


14. now, create a directory using mkdir diffutils-3.0 and enter cp src/*.c ./diffutils-3.0-patch in order to move the files into the new dirtectory
Then make a second directory named diffutils-og by entering mkdir diffutils-og and git clone https://git.savannah.gnu.org/git/diffutils.git
Then cd diffutils 
Then d ogit checkout tags/v3.0
Then cd .. 
make a new directory diffutils-3.0 and use the command cp -r diffutils-og/diffutils/src/*.c diffutils-3.0
Then run diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >  quote-3.0-test.txt

15. Then i used the diff command to compare the difference between the two and noticed that the files were offset, which caused the diff to output many innocuous differences. The files seem to be very close.   



