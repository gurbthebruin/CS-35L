Gurbir Arora
105178554 
Steps taken to compelete HW: 
log into lnxsrv09 using ssh gurbir@lnxsrv09.seas.ucla.edu
use command gpg2 --gen-key and fill out information when prompted to generate key
use command gpg2 --armor --export aroragurbir670@gmail.com > hw-pubkey.asc to export public key 
use command gpg2 --output hw-pubkey.sig --detach-sig hw-pubkey.asc to generate the detached signature and export the signature into the .sig file 
use command gpg2 --verify hw-pubkey.sig hw-pubkey.asc to verify that the signature made is good, this should output Good signature from "Gurbir Arora (Hey) <aroragurbir670@gmail.com>"

1. If other teams had been observing the information going across the network, the network would still be secure because the messages are encrypted through the authentication process 
that uses the receiver's public key, which is still visable to the observers, but the information can only be decrypted by the receiver's private key. Once the information is 
authenticated, the data will be encrypted and will remain secure as the "hackers" would have a very low chance of decrypting the information as our private keys remain private.  
However, if the observer tapped the keyboard after the client-server setup, the risk may be slightly higher than the previous case, but since the private key is generated by the
 computer algorithm and isn't depedant on the passphrase, the data should still be secure and risk should be low. This case is depedent on the method of user authentication as the hacker 
would be able to gain the username and password of the client and view files as a user in the server, but wouldn't know the private key, so they would be unable to decrypt the information. 
If user authentication is done through the use of a key, then the client must use the passphrase for the private key. This means the hacker could gain the passphrase of the client, but 
the hacker has a low chance of decrypting the information as the hacker has a low chance of knowing what the private key is. 
 Now, if other teams had access to the USB, then they have a decent chance(medium-high risk) at stealing all of the private keys and then they could use those keys along with the public
 keys to decrpyt the data. This depends on whether or not the client set a passphrase for the private key as the if their is no private key, the hacker can check the private key and 
use it to act as the client. This could result in the server believing that it is communicating with the client while it is really the hacker. Then, if the client set a passphrase, the hacker
is unable to check the cliet's private key and this would stop the hacker from sshing the server. The client's files still have the potential of being compromsied.    
2. The gpg2 --verify command is used to compare the cleartext signature to the decrytped using a public key, but it is possible to intercept the file from the creator and change the data.
Once the data has been changed by the "hacker," they can sign the file and send his/her public key instead of the original creator's public key. This will trick verify because it will use
 the hacker's public key to decrypt the data, which will match the signature. The reason this verification doesn't verify the orginal creator is because it simply verifies if the file is sent
by someone with the sender's private key, which means it is assumed that the sender's private key hasn't been compromised. This can be solved by somehow tracking the creator/origin of the 
file, which might be possible by having a serpate entity that keeps track of the creator/origin and confirms this information with the receiver, but this still has potential flaws. Similarily, 
the receiver can confirm with the sender that the file and its contents are what was intended, but this of course still has potential flaws.    
